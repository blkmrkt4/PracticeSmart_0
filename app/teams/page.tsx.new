"use client";

import { useState, useEffect, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "@/components/ui/use-toast";
import { Users, UserPlus, PlusCircle, Loader2, AlertTriangle, Building, Trash2, Edit } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";


// Type definitions
type UserTeam = {
  id: string;
  name: string;
};

type User = {
  id: string;
  email: string | null;
  name: string | null;
  created_at: string;
  teams: UserTeam[];
};

type TeamMember = {
  user_id: string;
  name: string | null;
  email: string | null;
  // Add other relevant fields if fetched, e.g., role in team
};

type Team = {
  id: string;
  name: string;
  created_at: string;
  updated_at: string | null;
  created_by: string;
  memberCount?: number;
  members?: TeamMember[];
};

// Helper to format date strings
const formatDate = (dateString: string | null | undefined) => {
  if (!dateString) return 'N/A';
  try {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  } catch (e) {
    return 'Invalid Date';
  }
};

export default function TeamsPage() {
  // Users state
  const [users, setUsers] = useState<User[]>([]);
  const [loadingUsers, setLoadingUsers] = useState(true);
  const [errorUsers, setErrorUsers] = useState<string | null>(null);
  
  // Teams state
  const [teams, setTeams] = useState<Team[]>([]);
  const [loadingTeams, setLoadingTeams] = useState(true);
  const [errorTeams, setErrorTeams] = useState<string | null>(null);
  
  // User dialog state
  const [isCreateUserDialogOpen, setIsCreateUserDialogOpen] = useState(false);
  const [newUserEmail, setNewUserEmail] = useState("");
  const [newUserName, setNewUserName] = useState("");
  const [isCreatingUser, setIsCreatingUser] = useState(false);
  
  // Team dialog state
  const [isCreateTeamDialogOpen, setIsCreateTeamDialogOpen] = useState(false);
  const [newTeamName, setNewTeamName] = useState("");
  const [isCreatingTeam, setIsCreatingTeam] = useState(false);
  
  // Assign dialog state
  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);
  const [assignDialogUser, setAssignDialogUser] = useState<User | null>(null);
  const [assignSelectedTeams, setAssignSelectedTeams] = useState<string[]>([]);
  const [assignLoading, setAssignLoading] = useState(false);
  
  // Delete team dialog state
  const [isDeleteTeamDialogOpen, setIsDeleteTeamDialogOpen] = useState(false);
  const [teamToDelete, setTeamToDelete] = useState<Team | null>(null);
  const [isDeletingTeam, setIsDeletingTeam] = useState(false);

  // Fetch Users
  const fetchUsers = useCallback(async () => {
    setLoadingUsers(true);
    setErrorUsers(null);
    try {
      const response = await fetch('/api/users');
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to fetch users');
      }
      const data = await response.json();
      setUsers(data || []);
    } catch (err: any) {
      console.error('Error fetching users:', err);
      setErrorUsers(err.message);
      toast({
        title: "Error Fetching Users",
        description: err.message,
        variant: "destructive"
      });
    } finally {
      setLoadingUsers(false);
    }
  }, []);

  // Fetch Teams
  const fetchTeams = useCallback(async () => {
    setLoadingTeams(true);
    setErrorTeams(null);
    try {
      const response = await fetch('/api/teams');
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to fetch teams');
      }
      const data = await response.json();
      setTeams(data || []);
    } catch (err: any) {
      console.error('Error fetching teams:', err);
      setErrorTeams(err.message);
      toast({
        title: "Error Fetching Teams",
        description: err.message,
        variant: "destructive"
      });
    } finally {
      setLoadingTeams(false);
    }
  }, []);

  // Open assign dialog for a user
  const handleOpenAssignDialog = (user: User) => {
    setAssignDialogUser(user);
    // Pre-select teams the user is already a member of
    setAssignSelectedTeams(user.teams?.map(team => team.id) || []);
    setIsAssignDialogOpen(true);
  };

  // Close dialog
  const handleCloseAssignDialog = () => {
    setIsAssignDialogOpen(false);
    setAssignDialogUser(null);
  };

  // Handle team selection change
  const handleAssignTeamChange = (teamId: string) => {
    setAssignSelectedTeams(prev => 
      prev.includes(teamId) ? prev.filter(id => id !== teamId) : [...prev, teamId]
    );
  };

  // Submit assignment
  const handleAssignTeams = async () => {
    if (!assignDialogUser) return;
    setAssignLoading(true);
    
    try {
      for (const teamId of assignSelectedTeams) {
        const response = await fetch('/api/teams/members', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            team_id: teamId, 
            email: assignDialogUser.email 
          }),
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `Failed to add user to team ${teamId}`);
        }
      }
      
      toast({
        title: "Teams Updated",
        description: `User ${assignDialogUser.name || assignDialogUser.email} has been assigned to the selected teams.`
      });
      
      await fetchUsers();
      handleCloseAssignDialog();
    } catch (err: any) {
      toast({
        title: "Error Assigning Teams",
        description: err.message,
        variant: "destructive"
      });
    } finally {
      setAssignLoading(false);
    }
  };

  // Create User
  const handleCreateUserSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newUserEmail.trim()) {
      toast({
        title: "Error",
        description: "Email is required",
        variant: "destructive"
      });
      return;
    }

    setIsCreatingUser(true);
    
    try {
      const response = await fetch('/api/users', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: newUserEmail.trim(),
          name: newUserName.trim() || null,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create user');
      }

      toast({
        title: "User Created",
        description: `User ${newUserName || newUserEmail} has been created successfully.`
      });

      setNewUserEmail("");
      setNewUserName("");
      setIsCreateUserDialogOpen(false);
      fetchUsers();
    } catch (err: any) {
      toast({
        title: "Error Creating User",
        description: err.message,
        variant: "destructive"
      });
    } finally {
      setIsCreatingUser(false);
    }
  };

  // Delete User
  const handleDeleteUser = async (userId: string) => {
    if (!confirm("Are you sure you want to delete this user?")) return;
    
    try {
      const response = await fetch(`/api/users/${userId}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to delete user');
      }

      toast({
        title: "User Deleted",
        description: "User has been deleted successfully."
      });
      
      fetchUsers();
    } catch (err: any) {
      toast({
        title: "Error Deleting User",
        description: err.message,
        variant: "destructive"
      });
    }
  };

  // Delete Team Dialog Handlers
  const handleOpenDeleteTeamDialog = (team: Team) => {
    setTeamToDelete(team);
    setIsDeleteTeamDialogOpen(true);
  };

  const handleCloseDeleteTeamDialog = () => {
    setIsDeleteTeamDialogOpen(false);
    setTeamToDelete(null);
  };

  const handleConfirmDeleteTeam = async () => {
    if (!teamToDelete) return;
    setIsDeletingTeam(true);
    
    try {
      const response = await fetch(`/api/teams/${teamToDelete.id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to delete team');
      }

      toast({
        title: "Team Deleted",
        description: `Team "${teamToDelete.name}" has been deleted successfully.`
      });
      
      fetchTeams();
      handleCloseDeleteTeamDialog();
    } catch (err: any) {
      toast({
        title: "Error Deleting Team",
        description: err.message,
        variant: "destructive"
      });
    } finally {
      setIsDeletingTeam(false);
    }
  };

  // Create Team
  const handleCreateTeamSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newTeamName.trim()) {
      toast({
        title: "Error",
        description: "Team name is required",
        variant: "destructive"
      });
      return;
    }

    setIsCreatingTeam(true);
    
    try {
      const response = await fetch('/api/teams', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newTeamName.trim(),
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create team');
      }

      toast({
        title: "Team Created",
        description: `Team "${newTeamName}" has been created successfully.`
      });

      setNewTeamName("");
      setIsCreateTeamDialogOpen(false);
      fetchTeams();
    } catch (err: any) {
      toast({
        title: "Error Creating Team",
        description: err.message || "An unexpected error occurred while creating team.",
        variant: "destructive"
      });
    } finally {
      setIsCreatingTeam(false);
    }
  };

  // useEffect hook for fetching data
  useEffect(() => {
    fetchUsers();
    fetchTeams();
  }, [fetchUsers, fetchTeams]);

  // Main component render
  return (
    <div className="container mx-auto p-4 bg-background text-foreground min-h-screen">
      <header className="mb-8">
        <h1 className="text-4xl font-bold tracking-tight flex items-center">
          <Building className="mr-3 h-10 w-10" /> Teams Management
        </h1>
        <p className="text-muted-foreground mt-2">
          Manage users and teams within your organization.
        </p>
      </header>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Users Section */}
        <section>
          <Card className="h-full flex flex-col bg-card/70 border-gray-700 shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <div className="flex items-center">
                <Users className="h-6 w-6 mr-2 text-primary" />
                <div>
                  <CardTitle>Users</CardTitle>
                  <CardDescription>Manage individual users</CardDescription>
                </div>
              </div>
              <Button 
                onClick={() => setIsCreateUserDialogOpen(true)}
                className="ml-auto"
              >
                <UserPlus className="h-4 w-4 mr-2" />
                Create User
              </Button>
            </CardHeader>
            <CardContent className="flex-grow overflow-hidden flex flex-col pt-6">
            {loadingUsers && (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <span className="ml-3 text-primary font-medium">Loading users...</span>
              </div>
            )}
            {errorUsers && (
              <div className="flex items-center justify-center py-8 text-destructive">
                <AlertTriangle className="h-6 w-6 mr-2" />
                <div>
                  <p className="font-medium">Error loading users</p>
                  <p className="text-sm text-muted-foreground">{errorUsers}</p>
                  <Button variant="outline" size="sm" className="mt-2" onClick={fetchUsers}>
                    Retry
                  </Button>
                </div>
              </div>
            )}
            {!loadingUsers && !errorUsers && users.length === 0 && (
              <p className="text-muted-foreground text-center py-4">No users found. Create one to get started!</p>
            )}
            {!loadingUsers && !errorUsers && users.length > 0 && (
              <ul className="space-y-4">
                {users.map((user: User) => (
                  <li key={user.id} className="flex items-center justify-between p-3 bg-card/60 rounded-md border border-border/70 hover:bg-card/90 transition-colors group">
                    <div className="flex flex-col">
                      <span className="font-medium text-foreground">{user.name || 'No Name'}</span>
                      <span className="text-sm text-muted-foreground">{user.email}</span>
                      <span className="text-xs text-muted-foreground/70 mt-1">
                        Added: {formatDate(user.created_at)}
                      </span>
                      {user.teams && user.teams.length > 0 && (
                        <div className="mt-2 flex flex-wrap gap-1">
                          {user.teams.map(team => (
                            <span key={team.id} className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary/20 text-primary">
                              {team.name}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                    <div className="flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="icon" 
                              onClick={() => handleDeleteUser(user.id)}
                              className="h-8 w-8 text-destructive hover:text-destructive/90 hover:bg-destructive/10"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Delete User</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                      
                      <Button 
                        variant="ghost" 
                        size="icon" 
                        onClick={() => handleOpenAssignDialog(user)}
                        className="h-8 w-8 text-primary hover:text-primary/90 hover:bg-primary/10"
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                    </div>
                  </li>
                ))}
              </ul>
            )}
            </CardContent>
          </Card>
        </section>

        {/* Teams Section */}
        <section>
          <Card className="h-full flex flex-col bg-card/70 border-gray-700 shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <div className="flex items-center">
                <Building className="h-6 w-6 mr-2 text-primary" />
                <div>
                  <CardTitle>Teams</CardTitle>
                  <CardDescription>Manage your teams</CardDescription>
                </div>
              </div>
              <Button 
                onClick={() => setIsCreateTeamDialogOpen(true)}
                className="ml-auto"
              >
                <PlusCircle className="h-4 w-4 mr-2" />
                New Team
              </Button>
            </CardHeader>
            <CardContent className="flex-grow overflow-hidden flex flex-col pt-6">
            {loadingTeams && (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <span className="ml-3 text-primary font-medium">Loading teams...</span>
              </div>
            )}
            {errorTeams && (
              <div className="flex items-center justify-center py-8 text-destructive">
                <AlertTriangle className="h-6 w-6 mr-2" />
                <div>
                  <p className="font-medium">Error loading teams</p>
                  <p className="text-sm text-muted-foreground">{errorTeams}</p>
                  <Button variant="outline" size="sm" className="mt-2" onClick={fetchTeams}>
                    Retry
                  </Button>
                </div>
              </div>
            )}
            {!loadingTeams && !errorTeams && teams.length === 0 && (
              <p className="text-muted-foreground text-center py-4">No teams found. Create one to get started!</p>
            )}
            {!loadingTeams && !errorTeams && teams.length > 0 && (
              <ul className="space-y-4">
                {teams.map((team: Team) => (
                  <li key={team.id} className="flex items-center justify-between p-3 bg-card/60 rounded-md border border-border/70 hover:bg-card/90 transition-colors group">
                    <div className="flex flex-col">
                      <span className="font-medium text-foreground">{team.name}</span>
                      <span className="text-xs text-muted-foreground/70 mt-1">
                        Created: {formatDate(team.created_at)}
                      </span>
                      <span className="text-xs text-muted-foreground mt-1">
                        Members: {team.memberCount || 0}
                      </span>
                    </div>
                    <div className="flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button 
                              variant="ghost" 
                              size="icon" 
                              onClick={() => handleOpenDeleteTeamDialog(team)}
                              className="h-8 w-8 text-destructive hover:text-destructive/90 hover:bg-destructive/10"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Delete Team</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                  </li>
                ))}
              </ul>
            )}
            </CardContent>
          </Card>
        </section>
      </div>

      {/* Create User Dialog */}
      <Dialog open={isCreateUserDialogOpen} onOpenChange={setIsCreateUserDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Create New User</DialogTitle>
            <DialogDescription>
              Add a new user to the system. They will be invited to join.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="userName">Name (Optional)</Label>
              <Input
                id="userName"
                value={newUserName}
                onChange={(e) => setNewUserName(e.target.value)}
                placeholder="John Doe"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="userEmail">Email</Label>
              <Input
                id="userEmail"
                value={newUserEmail}
                onChange={(e) => setNewUserEmail(e.target.value)}
                placeholder="john@example.com"
                required
                type="email"
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateUserDialogOpen(false)} disabled={isCreatingUser}>Cancel</Button>
            <Button onClick={handleCreateUserSubmit} disabled={isCreatingUser || !newUserEmail}>
              {isCreatingUser ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Create User
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Create Team Dialog */}
      <Dialog open={isCreateTeamDialogOpen} onOpenChange={setIsCreateTeamDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Create New Team</DialogTitle>
            <DialogDescription>
              Create a new team that users can be assigned to.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="newTeamName">Team Name</Label>
              <Input
                id="newTeamName"
                value={newTeamName}
                onChange={(e) => setNewTeamName(e.target.value)}
                placeholder="Development Team"
                required
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateTeamDialogOpen(false)} disabled={isCreatingTeam}>Cancel</Button>
            <Button onClick={handleCreateTeamSubmit} disabled={isCreatingTeam || !newTeamName}>
              {isCreatingTeam ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Create Team
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Assign User to Teams Dialog */}
      <Dialog open={isAssignDialogOpen} onOpenChange={handleCloseAssignDialog}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>Assign User to Teams</DialogTitle>
            <DialogDescription>
              Select the teams to assign to <strong>{assignDialogUser?.name || assignDialogUser?.email}</strong>.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-2 py-4 max-h-60 overflow-y-auto">
            {loadingTeams ? (
              <div className="flex items-center justify-center">
                <Loader2 className="h-6 w-6 animate-spin text-primary" />
                <span className="ml-2">Loading teams...</span>
              </div>
            ) : teams.length === 0 ? (
              <p className="text-muted-foreground text-center">No teams available to assign.</p>
            ) : (
              <>
                {teams.map((team: Team) => (
                  <label key={team.id} className="flex items-center gap-3 p-2 rounded-md hover:bg-muted/50 cursor-pointer transition-colors">
                    <input
                      type="checkbox"
                      className="form-checkbox h-5 w-5 text-primary rounded border-gray-600 focus:ring-primary/80 bg-background accent-primary"
                      checked={assignSelectedTeams.includes(team.id)}
                      onChange={() => handleAssignTeamChange(team.id)}
                      disabled={assignLoading}
                    />
                    <span className="text-sm font-medium text-foreground">{team.name}</span>
                  </label>
                ))}
              </>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={handleCloseAssignDialog} disabled={assignLoading}>Cancel</Button>
            <Button onClick={handleAssignTeams} disabled={assignLoading || assignSelectedTeams.length === 0}>
              {assignLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Assign
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={isDeleteTeamDialogOpen} onOpenChange={setIsDeleteTeamDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Delete Team</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete the team "<strong>{teamToDelete?.name}</strong>"? 
              This action cannot be undone. All team members will be unassigned from this team.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-4">
            <Button variant="outline" onClick={handleCloseDeleteTeamDialog} disabled={isDeletingTeam}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleConfirmDeleteTeam} disabled={isDeletingTeam}>
              {isDeletingTeam ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}
              Delete Team
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
