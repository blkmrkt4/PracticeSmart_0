"use client";

import { useState, useEffect, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "@/components/ui/use-toast";
import { Users, UserPlus, PlusCircle, Loader2, AlertTriangle, Building, Trash2, Edit } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";


// Type definitions
type UserTeam = {
  id: string;
  name: string;
};

type User = {
  id: string;
  email: string | null;
  name: string | null;
  created_at: string;
  teams: UserTeam[];
};

type TeamMember = {
  user_id: string;
  name: string | null;
  email: string | null;
  // Add other relevant fields if fetched, e.g., role in team
};

type Team = {
  id: string;
  name: string;
  created_at: string;
  updated_at: string | null;
  created_by: string;
  memberCount?: number;
  members?: TeamMember[];
};

// Helper to format date strings
const formatDate = (dateString: string | null | undefined) => {
  if (!dateString) return 'N/A';
  try {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  } catch (e) {
    return 'Invalid Date';
  }
};

export default function TeamsPage() {
  // Users state
  const [users, setUsers] = useState<User[]>([]);
  const [loadingUsers, setLoadingUsers] = useState(true);
  const [errorUsers, setErrorUsers] = useState<string | null>(null);
  
  // Teams state
  const [teams, setTeams] = useState<Team[]>([]);
  const [loadingTeams, setLoadingTeams] = useState(true);
  const [errorTeams, setErrorTeams] = useState<string | null>(null);
  
  // User dialog state
  const [isCreateUserDialogOpen, setIsCreateUserDialogOpen] = useState(false);
  const [newUserEmail, setNewUserEmail] = useState("");
  const [newUserName, setNewUserName] = useState("");
  const [isCreatingUser, setIsCreatingUser] = useState(false);
  
  // Team dialog state
  const [isCreateTeamDialogOpen, setIsCreateTeamDialogOpen] = useState(false);
  const [newTeamName, setNewTeamName] = useState("");
  const [isCreatingTeam, setIsCreatingTeam] = useState(false);
  
  // Assign dialog state
  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);
  const [assignDialogUser, setAssignDialogUser] = useState<User | null>(null);
  const [assignSelectedTeams, setAssignSelectedTeams] = useState<string[]>([]);
  const [assignLoading, setAssignLoading] = useState(false);
  
  // Delete team dialog state
  const [isDeleteTeamDialogOpen, setIsDeleteTeamDialogOpen] = useState(false);
  const [teamToDelete, setTeamToDelete] = useState<Team | null>(null);
  const [isDeletingTeam, setIsDeletingTeam] = useState(false);

  // Fetch Users
  const fetchUsers = useCallback(async () => {
    setLoadingUsers(true);
    setErrorUsers(null);
    try {
      const response = await fetch('/api/users');
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to fetch users');
      }
      const data = await response.json();
      setUsers(data || []);
    } catch (err: any) {
      console.error('Error fetching users:', err);
      setErrorUsers(err.message);
      toast({
        title: "Error Fetching Users",
        description: err.message,
        variant: "destructive"
      });
    } finally {
      setLoadingUsers(false);
    }
  }, []);

  // Fetch Teams
  const fetchTeams = useCallback(async () => {
    setLoadingTeams(true);
    setErrorTeams(null);
    try {
      const response = await fetch('/api/teams');
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to fetch teams');
      }
      const data = await response.json();
      setTeams(data || []);
    } catch (err: any) {
      console.error('Error fetching teams:', err);
      setErrorTeams(err.message);
      toast({
        title: "Error Fetching Teams",
        description: err.message,
        variant: "destructive"
      });
    } finally {
      setLoadingTeams(false);
    }
  }, []);

  // Open assign dialog for a user
  const handleOpenAssignDialog = (user: User) => {
    setAssignDialogUser(user);
    // Pre-select teams the user is already a member of
    const userTeamIds = user.teams.map(team => team.id);
    setAssignSelectedTeams(userTeamIds);
  };

  // Close dialog
  const handleCloseAssignDialog = () => {
    setAssignDialogUser(null);
    setAssignSelectedTeams([]);
  };

  // Handle team selection change
  const handleAssignTeamChange = (teamId: string) => {
    setAssignSelectedTeams(prev => 
      prev.includes(teamId) ? prev.filter(id => id !== teamId) : [...prev, teamId]
    );
  };

  // Submit assignment
  const handleAssignTeams = async () => {
    if (!assignDialogUser) return;
    setAssignLoading(true);
    
    try {
      // For each selected team, add the user
      for (const teamId of assignSelectedTeams) {
        const response = await fetch('/api/teams/members', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            team_id: teamId, 
            email: assignDialogUser.email 
          }),
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `Failed to add user to team ${teamId}`);
        }
      }
      
      toast({
        title: "Teams Updated",
        description: `User ${assignDialogUser.name || assignDialogUser.email} has been assigned to the selected teams.`,
      });
      
      // Refresh users to show updated team memberships
      await fetchUsers();
      handleCloseAssignDialog();
    } catch (err: any) {
      console.error('Error assigning teams:', err);
      toast({
        title: "Error Assigning Teams",
        description: err.message,
        variant: "destructive",
      });
    } finally {
      setAssignLoading(false);
    }
  };

  // Create User
  const handleCreateUserSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newUserEmail.trim()) {
      toast({
        title: "Validation Error",
        description: "Email is required.",
        variant: "destructive",
      });
      return;
    }
    setIsCreatingUser(true);
    try {
      const response = await fetch('/api/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: newUserEmail, name: newUserName }),
      });
      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.error || 'Failed to create user');
      }
      toast({ title: 'Success', description: 'User created.' });
      setIsCreateUserDialogOpen(false);
      setNewUserEmail("");
      setNewUserName("");
      await fetchUsers();
    } catch (err: any) {
      toast({ title: 'Error', description: err.message, variant: 'destructive' });
    } finally {
      setIsCreatingUser(false);
    }
  };

  // Delete User
  const handleDeleteUser = async (userId: string) => {
    if (!confirm('Are you sure you want to delete this user?')) return;
    try {
      const response = await fetch(`/api/users/${userId}`, {
        method: 'DELETE',
      });
      if (!response.ok) {
        const err = await response.json();
        throw new Error(err.error || 'Failed to delete user');
      }
      toast({ title: 'Success', description: 'User deleted.' });
      await fetchUsers();
    } catch (err: any) {
      toast({ title: 'Error', description: err.message, variant: 'destructive' });
    }
  };

  // Delete Team Dialog Handlers
  const handleOpenDeleteTeamDialog = (team: Team) => {
    setTeamToDelete(team);
    setIsDeleteTeamDialogOpen(true);
  };

  const handleCloseDeleteTeamDialog = () => {
    setTeamToDelete(null);
    setIsDeleteTeamDialogOpen(false);
  };

  const handleConfirmDeleteTeam = async () => {
    if (!teamToDelete) return;
    setIsDeletingTeam(true);
    try {
      const response = await fetch(`/api/teams/${teamToDelete.id}`, {
        method: 'DELETE',
      });
      if (!response.ok) {
        const errorData = await response.json();
        // Check for specific 409 conflict status from our API
        if (response.status === 409) {
            toast({
                title: 'Deletion Blocked',
                description: errorData.error || 'This team is referenced by other data (e.g., activities) and cannot be deleted yet.',
                variant: 'destructive',
                duration: 7000, // Longer duration for important messages
            });
        } else {
            throw new Error(errorData.error || 'Failed to delete team');
        }
      } else {
        toast({ title: 'Success', description: `Team "${teamToDelete.name}" deleted.` });
        fetchTeams(); // Refresh team list
        handleCloseDeleteTeamDialog();
      }
    } catch (err: any) {
      toast({ title: 'Error', description: err.message, variant: 'destructive' });
    } finally {
      setIsDeletingTeam(false);
    }
  };

  // Create Team
  const handleCreateTeamSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newTeamName.trim()) {
      toast({
        title: "Validation Error",
        description: "Team name cannot be empty.",
        variant: "destructive"
      });
      return;
    }
    setIsCreatingTeam(true);
    try {
      const response = await fetch('/api/teams', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: newTeamName })
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create team');
      }
      const newTeamData = await response.json();
      const newTeamWithCount = { ...newTeamData, memberCount: 1 };
      setTeams(prev => [...prev, newTeamWithCount]);
      toast({
        title: "Team Created",
        description: `Team "${newTeamName}" has been successfully created.`
      });
      setNewTeamName("");
      setIsCreateTeamDialogOpen(false);
      // fetchTeams(); 
    } catch (err: any) {
      console.error('Error creating team:', err);
      toast({
        title: "Error Creating Team",
        description: err.message || "An unexpected error occurred while creating team.",
        variant: "destructive"
      });
    } finally {
      setIsCreatingTeam(false);
    }
  };

  // useEffect hook for fetching data
  useEffect(() => {
    fetchUsers();
    fetchTeams();
  }, [fetchUsers, fetchTeams]);

  // Main component render
  return (
    <div className="container mx-auto p-4 bg-background text-foreground min-h-screen">
      <header className="mb-8">
        <h1 className="text-4xl font-bold tracking-tight flex items-center">
          <Building className="mr-3 h-10 w-10" /> Teams Management
        </h1>
        <p className="text-muted-foreground mt-2">
          Manage users and teams within your organization.
        </p>
      </header>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Users Section */}
        <section>
          <Card className="h-full flex flex-col bg-card/70 border-gray-700 shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <div className="flex items-center">
                <Users className="h-6 w-6 mr-2 text-primary" />
                <CardTitle className="text-2xl font-semibold">Users</CardTitle>
              </div>
              <Button onClick={() => setIsCreateUserDialogOpen(true)} size="sm">
                <UserPlus className="mr-2 h-4 w-4" /> Create User
              </Button>
            </CardHeader>
            <CardContent className="flex-grow overflow-y-auto pt-4">
              {loadingUsers && (
                <div className="flex justify-center items-center py-4">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                </div>
              )}

            {errorUsers && (
              <div className="flex flex-col items-center justify-center py-4 text-destructive">
                <AlertTriangle className="h-8 w-8 mb-2" />
                <p className="font-semibold">Error loading users</p>
                <p className="text-sm">{errorUsers}</p>
                <Button onClick={fetchUsers} variant="outline" size="sm" className="mt-2">Retry</Button>
              </div>
            )}
            {!loadingUsers && !errorUsers && users.length === 0 && (
              <p className="text-muted-foreground text-center py-4">No users found. Create one to get started!</p>
            )}
            {!loadingUsers && !errorUsers && users.length > 0 && (
              <ul className="space-y-4">
                {users.map((user: User) => (
                  <li key={user.id} className="flex flex-col p-4 border-2 border-gray-700 rounded-lg bg-card/80 hover:bg-muted/60 transition-all shadow-sm hover:shadow-md hover:border-gray-600 h-full">
                    <div className="flex justify-between items-start mb-2">
                      <div className="flex-1 min-w-0">
                        <p className="font-semibold truncate">{user.name || 'Unnamed User'}</p>
                        <p className="text-sm text-muted-foreground truncate">{user.email}</p>
                      </div>
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button
                              variant="destructive"
                              size="icon"
                              onClick={() => handleDeleteUser(user.id)}
                              className="h-8 w-8" // Consistent small icon button size
                            >
                              <Trash2 className="h-4 w-4" />
                              <span className="sr-only">Delete User</span>
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Delete User</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    <div className="mt-2 pt-2 border-t flex justify-between items-center">
                      <div>
                        <p className="text-xs text-muted-foreground">
                          Teams: {user.teams.length > 0 
                            ? user.teams.map((t: UserTeam) => t.name).join(', ') 
                            : 'None'}
                        </p>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleOpenAssignDialog(user)}
                      >
                        Assign to Team
                      </Button>
                  </li>
                ))}
              </ul>
            )}
            </CardContent>
          </Card>
        </section>

        {/* Teams Section - Right Column */}
        <section> {/* Changed div to section, grid handles sizing */}
          <Card className="h-full flex flex-col bg-card/70 border-gray-700 shadow-lg"> {/* Consistent styling */}
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <div className="flex items-center">
                <Building className="h-6 w-6 mr-2 text-primary" /> {/* Teams Icon */}
                <CardTitle className="text-2xl font-semibold">Teams</CardTitle>
              </div>
              <Button onClick={() => setIsCreateTeamDialogOpen(true)} size="sm">
                <PlusCircle className="mr-2 h-4 w-4" /> Create Team
              </Button>
            </CardHeader>
            <CardContent className="flex-grow overflow-y-auto pt-4"> {/* Consistent padding */}
            {loadingTeams && (
              <div className="flex items-center justify-center py-4 h-full">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <p className="ml-2">Loading teams...</p>
              </div>
            )}
            {errorTeams && (
              <div className="flex flex-col items-center justify-center py-4 text-destructive h-full">
                <AlertTriangle className="h-8 w-8 mb-2" />
                <p className="font-semibold">Error loading teams</p>
                <p className="text-sm">{errorTeams}</p>
                <Button onClick={fetchTeams} variant="outline" size="sm" className="mt-2">Retry</Button>
              </div>
            )}
            {!loadingTeams && !errorTeams && teams.length === 0 && (
              <p className="text-muted-foreground text-center py-4 h-full flex items-center justify-center">No teams found. Create one to get started!</p>
            )}
            {!loadingTeams && !errorTeams && teams.length > 0 && (
              <ul className="space-y-4">
                {teams.map((team: Team) => (
                  <li key={team.id} className="flex flex-col p-4 border-2 border-gray-700 rounded-lg bg-card/80 hover:bg-muted/60 transition-all shadow-sm hover:shadow-md hover:border-gray-600 h-full">
                    <div className="flex justify-between items-start mb-2">
                      <div className="flex-1 min-w-0">
                        <p className="font-semibold truncate">{team.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {team.memberCount || 0} member{(team.memberCount || 0) !== 1 ? 's' : ''}
                        </p>
                      </div>
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <Button 
                              variant="destructive" 
                              size="icon" 
                              className="h-8 w-8"
                              onClick={() => handleOpenDeleteTeamDialog(team)}
                            >
                              <Trash2 className="h-4 w-4" />
                              <span className="sr-only">Delete Team</span>
                            </Button>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>Delete Team</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    <div className="mt-2 pt-2 border-t border-gray-700 flex-grow">
                      <p className="text-xs text-muted-foreground">Created: {formatDate(team.created_at)}</p>
                      {team.members && team.members.length > 0 && (
                        <div className="mt-2">
                          <p className="text-xs font-medium text-muted-foreground mb-1">Members:</p>
                          <p className="text-sm text-muted-foreground">
                            {team.members && team.members.slice(0, 3).map((m: TeamMember, i: number) => (
                              <span key={i} className="block truncate">
                                {m.name || m.email}
                              </span>
                            ))}
                            {team.members.length > 3 && (
                              <span className="text-muted-foreground/70">+{team.members.length - 3} more</span>
                            )}
                          </p>
                        </div>
                      )}
                    </div>
                    <div className="mt-auto pt-2">
                      <Button
                        variant="outline"
                        size="sm"
                        className="w-full"
                        onClick={() => {
                          // TODO: Implement edit team functionality
                          console.log('Edit team:', team.id);
                        }}
                      >
                        Edit Team
                      </Button>
                    </div>
                  </li>
                ))}
              </ul>
            {/* Empty state for the main team list is handled by the condition at line 463 */}
            </CardContent>
          </Card>
        </section> {/* End of Teams Section */}
      </div> {/* End of two-column grid div */}
      {/* Create User Dialog */}
      <Dialog open={isCreateUserDialogOpen} onOpenChange={setIsCreateUserDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Create New User</DialogTitle>
            <DialogDescription>
              Enter the details for the new user.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="newUserName">Name</Label>
              <Input
                id="newUserName"
                value={newUserName}
                onChange={(e) => setNewUserName(e.target.value)}
                placeholder="Full Name (Optional)"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="newUserEmail">Email</Label>
              <Input
                id="newUserEmail"
                type="email"
                value={newUserEmail}
                onChange={(e) => setNewUserEmail(e.target.value)}
                placeholder="user@example.com"
                required
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateUserDialogOpen(false)} disabled={isCreatingUser}>Cancel</Button>
            <Button onClick={handleCreateUserSubmit} disabled={isCreatingUser || !newUserEmail}>
              {isCreatingUser ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Create User
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Create Team Dialog */}
      <Dialog open={isCreateTeamDialogOpen} onOpenChange={setIsCreateTeamDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Create New Team</DialogTitle>
            <DialogDescription>
              Enter the name for the new team.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="newTeamName">Team Name</Label>
              <Input
                id="newTeamName"
                value={newTeamName}
                onChange={(e) => setNewTeamName(e.target.value)}
                placeholder="Development Team"
                required
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateTeamDialogOpen(false)} disabled={isCreatingTeam}>Cancel</Button>
            <Button onClick={handleCreateTeamSubmit} disabled={isCreatingTeam || !newTeamName}>
              {isCreatingTeam ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Create Team
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Assign User to Teams Dialog */}
      <Dialog open={isAssignDialogOpen} onOpenChange={handleCloseAssignDialog}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>Assign User to Teams</DialogTitle>
            <DialogDescription>
              Select the teams to assign to <strong>{assignDialogUser?.name || assignDialogUser?.email}</strong>.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-2 py-4 max-h-60 overflow-y-auto">
            {loadingTeams ? (
              <div className="flex items-center justify-center">
                <Loader2 className="h-6 w-6 animate-spin text-primary" />
                <span className="ml-2">Loading teams...</span>
              </div>
            ) : teams.length === 0 ? (
              <p className="text-muted-foreground text-center">No teams available to assign.</p>
            ) : (
              <>
                {teams.map((team: Team) => (
                  <label key={team.id} className="flex items-center gap-3 p-2 rounded-md hover:bg-muted/50 cursor-pointer transition-colors">
                    <input
                      type="checkbox"
                      className="form-checkbox h-5 w-5 text-primary rounded border-gray-600 focus:ring-primary/80 bg-background accent-primary"
                      checked={assignSelectedTeams.includes(team.id)}
                      onChange={() => handleAssignTeamChange(team.id)}
                      disabled={assignLoading}
                    />
                    <span className="text-sm font-medium text-foreground">{team.name}</span>
                  </label>
                ))}
              </>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={handleCloseAssignDialog} disabled={assignLoading}>Cancel</Button>
            <Button onClick={handleAssignTeams} disabled={assignLoading || assignSelectedTeams.length === 0}>
              {assignLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Assign
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={isDeleteTeamDialogOpen} onOpenChange={setIsDeleteTeamDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Delete Team</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete the team "<strong>{teamToDelete?.name}</strong>"? 
              This action cannot be undone. All team members will be unassigned from this team.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-4">
            <Button variant="outline" onClick={handleCloseDeleteTeamDialog} disabled={isDeletingTeam}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleConfirmDeleteTeam} disabled={isDeletingTeam}>
              {isDeletingTeam ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Trash2 className="mr-2 h-4 w-4" />}
              Delete Team
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
